/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const plugin_name = 'koncham-workspace';
const view_type = 'root-leaves';
const view_name = 'Open Panes';
class konchamWorkspace extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.initializeView = () => {
            if (this.app.workspace.getLeavesOfType(view_type).length) {
                return;
            }
            this.app.workspace.getLeftLeaf(false).setViewState({
                type: view_type,
                active: true,
            });
        };
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('unloading plugin: ' + plugin_name);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin: ' + plugin_name);
            this.registerView(view_type, (leaf) => (new RootLeavesListView(leaf, this)));
            this.app.workspace.onLayoutReady(this.initializeView);
            this.addCommand({
                id: 'leaves-pin-on',
                name: 'pin all leaves',
                callback: () => this.leavesPinOn(),
            });
            this.addCommand({
                id: 'leaves-pin-off',
                name: 'unpin all leaves',
                callback: () => this.leavesPinOff(),
            });
            this.addCommand({
                id: 'show-root-leaves-view',
                name: 'show open-panes',
                callback: () => this.showRootLeavesView(),
            });
            this.addCommand({
                id: 'initialize-view',
                name: 'refresh open panes',
                callback: () => this.initializeView(),
            });
        });
    }
    leavesPinOn() {
        this.app.workspace.iterateRootLeaves((leaf) => {
            leaf.setPinned(true);
        });
    }
    leavesPinOff() {
        this.app.workspace.iterateRootLeaves((leaf) => {
            leaf.setPinned(false);
        });
    }
    showRootLeavesView() {
        this.app.workspace.iterateAllLeaves((leaf) => {
            if (leaf.view.getViewType() == view_type) {
                this.app.workspace.revealLeaf(leaf);
            }
        });
    }
    activateRootLeafbyNumber(n) {
        let counter = 1;
        this.app.workspace.iterateRootLeaves((leaf) => {
            if (counter == n) {
                this.app.workspace.setActiveLeaf(leaf, true, true);
            }
            counter += 1;
        });
    }
}
// I've used large parts of the code from (recent-files plugin)[https://github.com/tgrosinger/recent-files-obsidian]
class RootLeavesListView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.refreshView = () => {
            let leaf_active = this.app.workspace.activeLeaf;
            const rootEl = createDiv({ cls: 'nav-folder mod-root koncham-workspace' });
            const childrenEl = rootEl.createDiv({ cls: 'nav-folder-children' });
            let n = 1;
            this.app.workspace.iterateRootLeaves((leaf) => {
                const navFile = childrenEl.createDiv({ cls: 'nav-file' });
                const navFileTitle = navFile.createDiv({ cls: 'nav-file-title' });
                if (leaf === leaf_active) {
                    navFileTitle.addClass('is-active');
                }
                let displaytext = leaf.getDisplayText() + " || " + leaf.view.getViewType();
                if (leaf.view.getViewType() == "empty") {
                    displaytext = "[empty]";
                }
                else {
                    displaytext = leaf.getDisplayText();
                }
                navFileTitle.createDiv({
                    cls: 'nav-file-title-content',
                    text: displaytext,
                });
                navFileTitle.setAttr("data-nleaf", n);
                const contentEl = this.containerEl.children[1];
                contentEl.empty();
                contentEl.appendChild(rootEl);
                navFileTitle.onClickEvent(() => {
                    let nleaf = navFileTitle.getAttr('data-nleaf');
                    this.plugin.activateRootLeafbyNumber(parseInt(nleaf));
                });
                n += 1;
            });
        };
        this.plugin = plugin;
        this.refreshView();
    }
    onload() {
        this.registerEvent(this.app.workspace.on('active-leaf-change', this.refreshView));
        this.registerEvent(this.app.workspace.on('layout-change', this.refreshView));
        this.registerEvent(this.app.workspace.on('layout-ready', this.refreshView));
        // this.registerEvent(this.app.vault.on('delete', this.del));
    }
    getViewType() {
        return view_type;
    }
    getDisplayText() {
        return view_name;
    }
    getIcon() {
        return 'double-down-arrow-glyph';
    }
    onHeaderMenu(menu) {
        menu
            .addItem((item) => {
            item
                .setTitle('close')
                .setIcon('cross')
                .onClick(() => {
                this.app.workspace.detachLeavesOfType(view_type);
            });
        })
            .addItem((item) => {
            item
                .setTitle('pin leaves')
                .setIcon('pin')
                .onClick(() => {
                this.plugin.leavesPinOn();
            });
        })
            .addItem((item) => {
            item
                .setTitle('unpin leaves')
                .setIcon('cross-in-box')
                .onClick(() => {
                this.plugin.leavesPinOff();
            });
        });
    }
}

module.exports = konchamWorkspace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
